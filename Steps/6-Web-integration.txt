In this section, we’ll replace the command-line interface with a Web interface.
We will use React.js along with af ew other dependencies for this tutorial, but the same principles apply to any Web framework.

The assumption is that you are familiar with the concepts of react

We do not need the previous index.mjs file, because we’ll be writing it completely from scratch to use React. You can run the following command to delete it:
  $ rm index.mjs
Or, you can copy the index.rsh file into a new directory and work from there.

This code is supplemented with index.css and some views.
These details are not specific to Reach, and are fairly trivial, so we will not explain the specifics of those files.
If you run this locally, you’ll want to download those files.
Your directory should look like:
.
├── .vscode
├── public
├── package.json
├── package-lock.json
├── <other files>
└── src
    ├── assets
    ├── components
        ├── participants
          ├── Bidder.js
          ├── BidderViews.js
          ├── Creator.js
          ├── CreatorViews.js
          └── ParticipantViews.js
        ├── views
            └── AppViews.js
        ├── MainApp.js
        └── NavBar.js
    ├── context
        ├── MainAppContext.js 
    ├── App.js
    ├── index.js
    ├── index.rsh
    └── <Other files>

We will focus on frontend-react, because 5-complete/index.rsh is the same as previous sections.

We should prepare files we will use before coding frontend.

Firstly, we need to create test accounts like we do in mjs folder.

$[6-complete => src/context/MainAppContext.js - 1,6]
Lines 25 through 48 we get the users account. Then display view to choose the role.

$[6-complete  => src/components/MainApp.js
Lines 11 through 16 load  components according to role chosen.

For a Creator
$[6-complete => src/components/participants/Creator.js
Lines 16 through 95 build the Creator component with the functions and variables needed by the reach code which will be passed as the interact object. We use state to change the app Views

Lines 96 through 118 are used to deploy the contract. Line 108 we pass this (the Creator component) as the interact object.

For a Bidder
$[6-complete => src/components/participants/Bidder.js
Lines 14 through 101 build the Bidder components with the functions and variables needed by the reach code which will be passed as the interact object.We use state to change the app Views

Lines 102 through 110 are used to attach the contract. interact object. Line 105 we pass this (the Creator component) as the interact object.

Everything is ready to run our contract on the web interface.

Node.js must be installed in your system.
Use $ npm install to install dependencies
You need a copy of reach to get the devnet running.
If you don't have one already
$ cd src/
$ curl https://raw.githubusercontent.com/reach-sh/reach-lang/master/reach -o reach ; chmod +x reach
$ ./reach compile
After that running $ REACH_CONNECTOR_MODE=ALGO ./reach devnet (which runs the ALGORAND devnet inside the terminal)
In a new terminal go to the parent directory and start the React app
$ npm run start
This will run the web-app in the localhost:3000

Now our implementation of NFT With Royalties System is live in the browser!
We can leverage callbacks in the participant interact interface to display to and gather information from the user, through any Web UI framework of our choice.
If we wanted to deploy this application to the world, then we would take the static files that React produces and host them on a Web server.
These files embed your compiled Reach program, so there’s nothing more to do than provide them to the world.

Let’s review what we’ve done through this tutorial:

In part one, we saw how Reach can be installed with one command on almost any system without any dependencies beyond what most developers have anyways.
We also saw how Reach programs have a succinct setup that easily abstracts the details of your chosen consensus network into a couple lines and three key API calls.

In part two, we saw how Reach allows developers to focus on the business logic of their decentralized application and look past the nitty-gritty details of blockchain interaction and protocol design.

In part three, we saw that it is just as easy for Reach to network transactions as it is to deal with data sharing.
We also learned how to use the while loop, which can be used in many applications.

In part four, we introduce you to the Reach automatic formal verification engine and its ability to ensure our program doesn’t have entire categories of flaws and security vulnerabilities.

In part five, we have completed the necessary shortcomings for our Reach application to be ready and introduced Royalties into our logic.

In part six, we saw how to deploy your Reach program as a fully decentralized Web application.

Despite having done so much, this is really just a brief introduction to what is possible with Reach.